<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009" alpha.disabledStates="0.5">

    <fx:Metadata>
    <![CDATA[
        [HostComponent("spark.components.CheckBox")]
        ]]>
    </fx:Metadata>

    <fx:Script fb:purpose="styling">

        static private const exclusions:Array = ["labelDisplay", "check"];

        override public function get colorizeExclusions():Array {
            return exclusions;
        }

        static private const symbols:Array = ["checkMarkFill"];

        override public function get symbolItems():Array {
            return symbols
        };

        override protected function initializationComplete():void {
            useChromeColor = true;
            super.initializationComplete();
        }
    </fx:Script>

    <fx:Script>
        <![CDATA[
        import spark.components.supportClasses.LabelPlacement;

        private static const focusExclusions:Array = ["labelDisplay"];

        override public function get focusSkinExclusions():Array {
            return focusExclusions;
        };

        override public function styleChanged(styleProp:String):void {
            super.styleChanged(styleProp);
            if (styleProp == "labelPlacement" || styleProp == "gap" || styleProp === null) {
                updateLabelPlacement();
            }
        }

        public function updateLabelPlacement():void {
            var spacing:int;
            if (!checkDisplay || !labelDisplay) {
                return;
            }
            if (getStyle("gap") == undefined) {
                spacing = 5;
            } else {
                spacing = int(getStyle("gap"));
            }
            switch (String(getStyle("labelPlacement")).toLowerCase()) {
                case LabelPlacement.BOTTOM:
                    labelDisplay.horizontalCenter = 0;
                    labelDisplay.verticalCenter = undefined;
                    labelDisplay.top = checkDisplay.height + spacing;
                    labelDisplay.bottom = 0;
                    labelDisplay.left = 0;
                    labelDisplay.right = 0;
                    checkDisplay.horizontalCenter = 0;
                    checkDisplay.verticalCenter = undefined;
                    checkDisplay.top = 0;
                    checkDisplay.bottom = undefined;
                    break;
                case LabelPlacement.LEFT:
                    //Adjust the labels position to left side.
                    labelDisplay.horizontalCenter = undefined;
                    labelDisplay.verticalCenter = 2;
                    labelDisplay.top = 3;
                    labelDisplay.bottom = 3;
                    labelDisplay.left = 0;
                    labelDisplay.right = checkDisplay.width + spacing;
                    checkDisplay.horizontalCenter = undefined;
                    checkDisplay.verticalCenter = 0;
                    checkDisplay.left = undefined;
                    checkDisplay.right = 0;
                    break;
                case LabelPlacement.TOP:
                    labelDisplay.horizontalCenter = 0;
                    labelDisplay.verticalCenter = undefined;
                    labelDisplay.top = 0;
                    labelDisplay.bottom = checkDisplay.height + spacing;
                    labelDisplay.left = 0;
                    labelDisplay.right = 0;
                    checkDisplay.horizontalCenter = 0;
                    checkDisplay.verticalCenter = undefined;
                    checkDisplay.top = undefined;
                    checkDisplay.bottom = 0;
                    break;
                case LabelPlacement.RIGHT:
                default:
                    labelDisplay.horizontalCenter = undefined;
                    labelDisplay.verticalCenter = 2;
                    labelDisplay.top = 3;
                    labelDisplay.bottom = 3;
                    labelDisplay.left = checkDisplay.width + spacing;
                    labelDisplay.right = 0;
                    checkDisplay.horizontalCenter = undefined;
                    checkDisplay.verticalCenter = 0;
                    checkDisplay.left = 0;
                    checkDisplay.right = undefined;
                    break;
            }
        }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="up"/>
        <s:State name="over" stateGroups="overStates"/>
        <s:State name="down" stateGroups="downStates"/>
        <s:State name="disabled" stateGroups="disabledStates"/>
        <s:State name="upAndSelected" stateGroups="selectedStates"/>
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates"/>
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates"/>
        <s:State name="disabledAndSelected" stateGroups="disabledStates, selectedStates"/>
    </s:states>

    <s:Group id="checkDisplay" verticalCenter="0" width="18" height="18" layoutDirection="ltr">

        <s:Rect left="0" top="0" right="0" bottom="0"
                left.downStates="1" top.downStates="1" right.downStates="-1" bottom.downStates="-1"
                radiusX="1" radiusY="1">
            <s:fill>
                <s:SolidColor color="#31363B"/>
            </s:fill>
            <s:stroke>
                <s:SolidColorStroke color="#A3A6A8"
                                    color.selectedStates="#3DAEE9" color.over="#3DAEE9" color.down="#3DAEE9"/>
            </s:stroke>
        </s:Rect>


        <!--<s:Rect left="1" top="1" bottom="1" width="1" includeIn="downStates">-->
            <!--<s:fill>-->
                <!--<s:SolidColor color="0x000000" alpha="0.07"/>-->
            <!--</s:fill>-->
        <!--</s:Rect>-->
        <!--<s:Rect right="1" top="1" bottom="1" width="1" includeIn="downStates">-->
            <!--<s:fill>-->
                <!--<s:SolidColor color="0x000000" alpha="0.07"/>-->
            <!--</s:fill>-->
        <!--</s:Rect>-->
        <!--<s:Rect left="1" top="1" right="1" height="1" includeIn="downStates">-->
            <!--<s:fill>-->
                <!--<s:SolidColor color="0x000000" alpha="0.25"/>-->
            <!--</s:fill>-->
        <!--</s:Rect>-->
        <!--<s:Rect left="1" top="2" right="1" height="1" includeIn="downStates">-->
            <!--<s:fill>-->
                <!--<s:SolidColor color="0x000000" alpha="0.09"/>-->
            <!--</s:fill>-->
        <!--</s:Rect>-->

        <!--<s:Rect left="0" top="0" right="0" bottom="0">-->
            <!--<s:stroke>-->
                <!--<s:LinearGradientStroke rotation="90" weight="1">-->
                    <!--<s:GradientEntry color="0x000000"-->
                                     <!--alpha="0.5625"-->
                                     <!--alpha.downStates="0.6375"/>-->
                    <!--<s:GradientEntry color="0x000000"-->
                                     <!--alpha="0.75"-->
                                     <!--alpha.downStates="0.85"/>-->
                <!--</s:LinearGradientStroke>-->
            <!--</s:stroke>-->
        <!--</s:Rect>-->

        <s:Rect left="3" top="3" right="3" bottom="3"
                left.downStates="4" top.downStates="4" right.downStates="2" bottom.downStates="2"
                includeIn="selectedStates" id="check" itemCreationPolicy="immediate">
            <s:fill>
                <s:SolidColor id="checkMarkFill"/>
            </s:fill>
        </s:Rect>
    </s:Group>

    <s:Label id="labelDisplay"
             textAlign="start"
             verticalAlign="middle"
             maxDisplayedLines="1"
             left="18" right="0" top="3" bottom="3" verticalCenter="2"/>

</s:SparkSkin>
